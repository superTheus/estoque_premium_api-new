# Sistema de Logs de Webhooks

## Arquivos Criados

### 1. SQL
- **Arquivo**: `database_webhook_logs.sql`
- **Tabela**: `webhook_logs`

### 2. Model
- **Arquivo**: `App/Models/WebhookLogsModel.php`
- Métodos CRUD completos seguindo padrão BaseModel

### 3. Controller
- **Arquivo**: `App/Controllers/WebhookLogsController.php`
- Métodos principais:
  - `receberWebhook()` - Captura e salva webhook
  - `buscarPorOrigem()` - Filtra logs por origem
  - `limparLogsAntigos()` - Remove logs antigos
  - `find()`, `findOnly()`, `create()`, `update()` - CRUD padrão

### 4. Rotas Implementadas

#### Rotas Públicas (receber webhooks)
- `POST /webhook-logs/receber/{origem}` - Webhook com origem específica
- `POST /webhook-logs/receber` - Webhook genérico

#### Rotas Privadas (requer autenticação)
- `POST /webhook-logs/listar` - Listar todos os logs
- `POST /webhook-logs/buscar-origem` - Buscar por origem
- `POST /webhook-logs/limpar-antigos` - Limpar logs antigos

### 5. Registro no BaseModel
- Tabela registrada no `$structureDatabase`

## Estrutura da Tabela

```sql
webhook_logs
├── id (PK)
├── origem (VARCHAR) - Ex: mercadopago, pagseguro, custom
├── body (LONGTEXT) - Corpo completo da requisição
├── ip_origem (VARCHAR) - IP de origem
├── user_agent (VARCHAR) - User agent
├── headers (TEXT) - Headers em JSON
├── method (VARCHAR) - GET, POST, PUT, etc
├── url (VARCHAR) - URL chamada
└── dthr_registro (TIMESTAMP) - Data/hora de criação
```

## Como Usar

### 1. Criar Tabela
```bash
# Execute o arquivo SQL no banco de dados
mysql -u root database_name < database_webhook_logs.sql
```

### 2. Receber Webhook

#### Com origem específica
```
POST /webhook-logs/receber/mercadopago
Body: { qualquer conteúdo }
```

#### Webhook genérico
```
POST /webhook-logs/receber
Body: { qualquer conteúdo }
```

**Resposta**:
```json
{
  "success": true,
  "message": "Webhook recebido e registrado com sucesso",
  "log_id": 123
}
```

### 3. Listar Logs
```
POST /webhook-logs/listar
Headers: Authorization: Bearer {token}
Body: {
  "filter": {},
  "limit": 50,
  "offset": 0,
  "order": {
    "cols": ["id"],
    "direction": "DESC"
  }
}
```

### 4. Buscar por Origem
```
POST /webhook-logs/buscar-origem
Headers: Authorization: Bearer {token}
Body: {
  "origem": "mercadopago",
  "limit": 50,
  "offset": 0
}
```

### 5. Limpar Logs Antigos
```
POST /webhook-logs/limpar-antigos
Headers: Authorization: Bearer {token}
Body: {
  "dias": 30
}
```
Remove logs com mais de 30 dias.

## O Que é Capturado

1. **Body**: Corpo completo da requisição como string
2. **IP Origem**: Endereço IP que enviou o webhook
3. **User Agent**: Identificação do cliente
4. **Headers**: Todos os headers HTTP em JSON
5. **Method**: Método HTTP (POST, GET, etc)
6. **URL**: URL completa que foi chamada
7. **Data/Hora**: Timestamp automático

## Exemplos de Uso

### Webhook de Terceiros
Configure em seus serviços externos:
```
URL: https://seudominio.com/webhook-logs/receber/nome-servico
```

Exemplos:
- `/webhook-logs/receber/mercadopago`
- `/webhook-logs/receber/pagseguro`
- `/webhook-logs/receber/stripe`
- `/webhook-logs/receber/whatsapp`

### Visualizar Logs no Frontend
```javascript
async function buscarLogs(origem) {
  const response = await fetch('/webhook-logs/buscar-origem', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + token
    },
    body: JSON.stringify({
      origem: origem,
      limit: 100
    })
  });
  
  const data = await response.json();
  console.log('Logs:', data.data);
}
```

### Limpar Logs Periodicamente
Configure um cron job para limpar logs antigos:
```bash
# Diariamente às 3h da manhã
0 3 * * * curl -X POST https://seudominio.com/webhook-logs/limpar-antigos \
  -H "Authorization: Bearer TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"dias": 30}'
```

## Vantagens

✅ Registra QUALQUER webhook automaticamente  
✅ Útil para debug e auditoria  
✅ Armazena corpo completo + metadados  
✅ Busca por origem específica  
✅ Limpeza automática de logs antigos  
✅ Segue padrão do sistema (Model, Controller, BaseModel)  
✅ Rotas públicas para receber webhooks  
✅ Rotas privadas para consultar logs  

## Observações

- Body é salvo como string (pode ser JSON, XML, texto, etc)
- Headers são convertidos para JSON
- IP de origem é capturado automaticamente
- Logs podem crescer rapidamente - use limpeza periódica
- Para análise de JSON, use `json_decode($log['body'])` no frontend
